import pytest
from functools import partial

from src.common import equal_ranges, overlaps_at_least
from src.long_read_profiles import (
    OverlappingFeaturesProfileConstructor,
    NonOverlappingFeaturesProfileConstructor,
)


class TestOverlappingFeatureProfile:
    @pytest.mark.parametrize("known_features, gene_region, read_exons, polya_pos, polyt_pos, delta, expected_gene, expected_read",
                             [([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 49), (61, 89), (111, 139), (181, 200)],
                               -1, -1, 3, [1, 1, 1], [1, 1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 50), (60, 90), (110, 140), (181, 200)],
                               -1, -1, 3, [1, 1, 1], [1, 1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 50), (71, 90), (110, 140), (181, 200)],
                               -1, -1, 3, [-1, 1, 1], [-1, 1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 50), (71, 80), (100, 130), (181, 200)],
                               -1, -1, 3, [-1, -1, -1], [-1, -1, -1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 30), (71, 80), (100, 105), (186, 200)],
                               -1, -1, 3, [-1, -1, -1], [-1, -1, -1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 30), (71, 80), (100, 200)],
                               -1, -1, 3, [-1, -1, -1], [-1, -1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(1000, 1030), (1071, 1080), (1100, 1200)],
                               -1, -1, 3, [0, 0, 0], [0, 0]),
                              ([(1050, 1060), (1090, 1110), (1140, 1180)], (1000, 1200), [(0, 30), (71, 80), (100, 200)],
                               -1, -1, 3, [0, 0, 0], [0, 0]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 200)],
                               -1, -1, 3, [-1, -1, -1], []),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(80, 120)],
                               -1, -1, 3, [0, -1, 0], []),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 50), (181, 200)],
                               -1, -1, 3, [-1, -1, -1], [-1]),
                              ([(50, 60), (90, 110), (93, 107), (140, 180)], (0, 200), [(0, 49), (61, 90), (110, 139), (181, 200)],
                               -1, -1, 3, [1, 1, -1, 1], [1, 1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 49), (61, 89), (111, 120)],
                               -1, -1, 3, [1, 1, 0], [1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(55, 80), (111, 139), (181, 200)],
                               -1, -1, 3, [0, -1, 1], [-1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(62, 89), (111, 139), (181, 200)],
                               -1, -1, 3, [0, 1, 1], [1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(68, 89), (111, 139), (181, 200)],
                               -1, 68, 3, [-2, 1, 1], [1, 1]),
                              ([(50, 60), (90, 110), (140, 180)], (0, 200), [(0, 49), (61, 89), (111, 120)],
                               119, -1, 3, [1, 1, -2], [1, 1]),
                              ])
    def test_intron_profile(self, known_features, gene_region, read_exons, polya_pos, polyt_pos, delta, expected_gene, expected_read):
        intron_profile_constructor = \
            OverlappingFeaturesProfileConstructor(known_features, gene_region,
                                                  comparator=partial(equal_ranges, delta=delta),
                                                  absence_condition=partial(overlaps_at_least, delta=10),
                                                  delta=delta)
        profile = intron_profile_constructor.construct_intron_profile(read_exons, polya_pos, polyt_pos)
        assert profile.gene_profile == expected_gene
        assert profile.read_profile == expected_read

    @pytest.mark.parametrize("known_features, gene_region, read_exons, polya_pos, polyt_pos, delta, expected_gene, expected_read",
                             [([(20, 60), (90, 110), (180, 200)], (20, 200), [(20, 60), (90, 110), (180, 200)],
                               -1, -1, 3, [1, 1, 1], [1, 1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], (20, 200), [(21, 60), (91, 111), (178, 200)],
                               -1, -1, 3, [1, 1, 1], [1, 1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], (20, 200), [(20, 60), (99, 110), (180, 200)],
                               -1, -1, 3, [1, -1, 1], [1, -1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], (20, 200), [(20, 60), (90, 110)],
                               -1, -1, 3, [1, 1, 0], [1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], (20, 200), [(90, 110), (180, 200)],
                               -1, -1, 3, [0, 1, 1], [1, 1])
                              ])
    def test_exon_profile(self, known_features, gene_region, read_exons, polya_pos, polyt_pos, delta, expected_gene, expected_read):
        exon_profile_constructor = \
            OverlappingFeaturesProfileConstructor(known_features, gene_region,
                                                  comparator=partial(equal_ranges, delta=delta),
                                                  delta=delta)
        profile = exon_profile_constructor.construct_exon_profile(read_exons, polya_pos, polyt_pos)
        assert profile.gene_profile == expected_gene
        assert profile.read_profile == expected_read


class TestNonOverlappingFeatureProfile:

    @pytest.mark.parametrize("known_features, read_exons, polya_pos, polyt_pos, delta, expected_gene, expected_read",
                             [([(20, 60), (90, 110), (180, 200)], [(20, 60), (90, 110), (180, 200)],
                               -1, -1, 3, [1, 1, 1], [1, 1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], [(21, 60), (91, 111), (178, 200)],
                               -1, -1, 3, [1, 1, 1], [1, 1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], [(20, 60), (99, 110), (180, 200)],
                               -1, -1, 3, [1, 1, 1], [1, 1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], [(20, 60), (90, 110)],
                               -1, -1, 3, [1, 1, 0], [1, 1]),
                              ([(20, 60), (90, 110), (180, 200)], [(90, 110), (180, 200)],
                               -1, -1, 3, [0, 1, 1], [1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(20, 60), (90, 110), (180, 200)],
                               -1, -1, 3, [1, 1, 1, 1, 1, 1], [1, 1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(20, 60), (92, 110), (180, 200)],
                               -1, -1, 3, [1, 1, 1, 0, 1, 1], [1, 1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(20, 60), (94, 110), (180, 200)],
                               -1, -1, 3, [1, 1, 1, -1, 1, 1], [1, 1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(20, 60), (180, 200)],
                               -1, -1, 3, [1, 1, 1, -1, -1, 1], [1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(20, 32), (180, 200)],
                               -1, -1, 3, [1, -1, -1, -1, -1, 1], [1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(40, 60), (100, 110), (180, 190)],
                               -1, -1, 3, [0, 0, 1, -1, 1, 1], [1, 1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(90, 110)],
                               -1, -1, 3, [0, 0, 0, 1, 1, 0], [1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(20, 60), (90, 110)],
                               110, -1, 3, [1, 1, 1, 1, 1, -2], [1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(90, 110), (180, 200)],
                               -1, 90, 3, [-2, -2, -2, 1, 1, 1], [1, 1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(5, 15),  (70, 80), (140, 150), (160, 180), (300, 310)],
                               -1, -1, 3, [-1, -1, -1, -1, -1, -1], [0, -1, -1, 0, 0]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(5, 15), (300, 310)],
                               -1, -1, 3, [-1, -1, -1, -1, -1, -1], [0, 0]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(70, 80)],
                               -1, -1, 3, [0, 0, 0, 0, 0, 0], [-1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(4, 15), (160, 170)],
                               -1, -1, 3, [-1, -1, -1, -1, -1, 0], [0, -1]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(72, 85), (260, 270)],
                               -1, -1, 3, [0, 0 ,0, -1, -1, -1], [-1, 0]),
                              ([(20, 30), (31, 40), (41, 60), (90, 93), (94, 110), (180, 200)],
                               [(30, 60), (70, 80), (100, 110), (160, 179)],
                               -1, -1, 3, [0, 1, 1, -1, 1, 0], [1, -1, 1, -1]),
                              ])
    def test_split_exon_profile(self, known_features, read_exons, polya_pos, polyt_pos, delta, expected_gene, expected_read):
        split_exon_profile_constructor = \
            NonOverlappingFeaturesProfileConstructor(known_features,
                                                     comparator=partial(overlaps_at_least, delta=5),
                                                     delta=delta)
        profile = split_exon_profile_constructor.construct_profile(read_exons, polya_pos, polyt_pos)
        assert profile.gene_profile == expected_gene
        assert profile.read_profile == expected_read
